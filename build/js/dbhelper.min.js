class DBHelper{static createIdb(){return idb.open("restaurantsDB",1,function(upgradeDb){upgradeDb.createObjectStore("restaurants",{keyPath:"id"}),upgradeDb.createObjectStore("reviews",{keyPath:"id"})})}static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(callback){let idbPromise=DBHelper.createIdb();fetch(DBHelper.DATABASE_URL).then(function(response){if(response.ok)return response.json();throw new Error(response.status)}).then(function(jsondata){idbPromise.then(function(db){let restaurantsStore=db.transaction("restaurants","readwrite").objectStore("restaurants");for(let key in jsondata)restaurantsStore.put(jsondata[key]);console.log("data inserted into idb!")}),callback(null,jsondata)}).catch(function(error){idbPromise.then(function(db){return db.transaction("restaurants","readonly").objectStore("restaurants").getAll()}).then(function(items){callback(null,items)})})}static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const restaurant=restaurants.find(r=>r.id==id);restaurant?callback(null,restaurant):callback("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{let results=restaurants;"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood),uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error)callback(error,null);else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type),uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return void 0==restaurant.photograph&&(restaurant.photograph=restaurant.id),`./img/${restaurant.photograph}.jpg`}static mapMarkerForRestaurant(restaurant,map){const marker=new L.marker([restaurant.latlng.lat,restaurant.latlng.lng],{title:restaurant.name,alt:restaurant.name,url:DBHelper.urlForRestaurant(restaurant)});return marker.addTo(newMap),marker}}