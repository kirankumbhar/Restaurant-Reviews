let restaurant;var newMap;function syncdata(event){let idbPromise=DBHelper.createIdb();if("offline"==event.type&&console.log("You went offline"),"online"==event.type){console.log("you are online"),idbPromise.then(function(db){return db.transaction("reviews","readonly").objectStore("reviews").getAll()}).then(function(reviews){let pending_reviews=[];for(key in reviews){let review=reviews[key];for(key in review)"synchStatus"==key&&"pending"==review[key]&&(delete review.synchStatus,delete review.id,pending_reviews.push(review),console.log(review))}for(index in console.log(pending_reviews),pending_reviews)console.log(pending_reviews[index]),fetch("http://localhost:1337/reviews/",{method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(pending_reviews[index])}).then(function(response){if(!response.ok)throw new Error(response.status);console.log(response.status)}).catch(function(error){console.log(error)})});let id=getRestaurantId();console.log(id),fetch(`http://localhost:1337/reviews/?restaurant_id=${id}`,{method:"GET",headers:{"Content-Type":"application/json; charset=utf-8"}}).then(function(response){return response.json()}).then(function(server_restaurant_reviews){idbPromise.then(function(db){return db.transaction("reviews","readonly").objectStore("reviews").getAll()}).then(function(allIdbReviews){let idb_restaurant_reviews=[];for(key in allIdbReviews){let review=allIdbReviews[key];for(key in review)"restaurant_id"==key&&review[key]==id&&idb_restaurant_reviews.push(review)}console.log(Math.max(idb_restaurant_reviews.length,server_restaurant_reviews.length));let flag=0;for(let i=0;i<idb_restaurant_reviews.length;i++){for(let j=0;j<server_restaurant_reviews.length;j++)idb_restaurant_reviews[i].id==server_restaurant_reviews[j].id&&(flag=1);0==flag?(console.log(idb_restaurant_reviews[i]),idbPromise.then(function(db){return db.transaction("reviews","readwrite").objectStore("reviews").delete(idb_restaurant_reviews[i].id)}).then(function(status){console.log(status)})):flag=0}})})}}window.addEventListener("online",syncdata),window.addEventListener("offline",syncdata),document.addEventListener("DOMContentLoaded",event=>{initMap()}),initMap=(()=>{fetchRestaurantFromURL((error,restaurant)=>{error?console.error(error):(self.newMap=L.map("map",{center:[restaurant.latlng.lat,restaurant.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1Ijoic2NvcnBpb25rIiwiYSI6ImNqaXNleXA0ZzBsOWozdnJyYXMzZHFyZ3kifQ.IEY-dNY3duQlpoQi3HvC6A",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap))})}),fetchRestaurantFromURL=(callback=>{if(self.restaurant)return void callback(null,self.restaurant);const id=getParameterByName("id");id?DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant,restaurant?(fillRestaurantHTML(),fetchReviews(),reviewButtonHTML(),getRestaurantId(),callback(null,restaurant)):console.error(error)}):(error="No restaurant id in URL",callback(error,null))}),getRestaurantId=((restaurant=self.restaurant)=>restaurant.id),fillRestaurantHTML=((restaurant=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=restaurant.name,document.getElementById("restaurant-address").innerHTML=restaurant.address;const image=document.getElementById("restaurant-img");image.className="restaurant-img",image.src=`/small_images/${restaurant.id}-400_small.jpg`,image.alt=`Image of "${restaurant.name}`,image.srcset=`/small_images/${restaurant.id}-400_small.jpg 400w, ${DBHelper.imageUrlForRestaurant(restaurant)} 800w`,document.getElementById("restaurant-cuisine").innerHTML=restaurant.cuisine_type,restaurant.operating_hours&&fillRestaurantHoursHTML()}),fillRestaurantHoursHTML=((operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById("restaurant-hours");for(let key in operatingHours){const row=document.createElement("tr"),day=document.createElement("td");day.innerHTML=key,row.appendChild(day);const time=document.createElement("td");time.innerHTML=operatingHours[key],row.appendChild(time),hours.appendChild(row)}}),showReviewForm=(id=>{let idbPromise=DBHelper.createIdb();const container=document.getElementById("maincontent"),modal_wrap=document.createElement("div");modal_wrap.id="modal_wrap";const form=document.createElement("form");form.id="review-form",form.method="post";const header=document.createElement("h2");header.id="review-form-header",header.innerHTML="Submit your Review",form.appendChild(header);const rating=document.createElement("fieldset");rating.type="text",rating.className="rating",rating.id="rating_fieldset";const ratingLabel=document.createElement("legend");ratingLabel.innerHTML="Rating: ",rating.appendChild(ratingLabel);for(var i=4;i>=0;i--){const radio_star=document.createElement("input");radio_star.type="radio",radio_star.name="star_rating",radio_star.id=`star-${i+1}`,radio_star.value=i+1,radio_star.className="rating-input",radio_star.setAttribute("aria-label",`radio input for ${i+1} star rating`),rating.appendChild(radio_star);const radio_star_label=document.createElement("label");radio_star_label.htmlFor=radio_star.id,radio_star_label.className="rating-star",rating.appendChild(radio_star_label)}form.appendChild(rating),form.appendChild(document.createElement("br"));const name=document.createElement("input");name.type="text",name.id="fullname",name.setAttribute("aria-label","text input for name");const nameLabel=document.createElement("label");nameLabel.htmlFor=name.id,nameLabel.innerHTML="Name: ",form.appendChild(nameLabel),form.appendChild(name),form.appendChild(document.createElement("br"));const comments=document.createElement("textarea");comments.id="comments",comments.setAttribute("aria-label","textarea to add comments");const commentsLabel=document.createElement("label");commentsLabel.for=comments.id,commentsLabel.innerHTML="Comments: ",form.appendChild(commentsLabel),form.appendChild(comments),form.appendChild(document.createElement("br"));const submit=document.createElement("button");submit.type="submit",submit.innerHTML="Submit Review",submit.id="submit-button",submit.addEventListener("click",function(event){event.preventDefault();let fullname=document.getElementById("fullname").value,comments=document.getElementById("comments").value,rating=0;for(let i=0;i<5;i++)if(document.getElementById(`star-${i+1}`).checked){rating=document.getElementById(`star-${i+1}`).value;break}let data={restaurant_id:id,name:fullname,rating:rating,comments:comments};console.log(JSON.stringify(data)),fetch("http://localhost:1337/reviews/",{method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(data)}).then(function(response){if(!response.ok)throw new Error(response.status);window.alert("Review Submitted successfully! ")}).catch(function(error){idbPromise.then(function(db){return db.transaction("reviews","readwrite").objectStore("reviews").getAllKeys()}).then(function(keys){let maxKey=Math.max(...keys);data.synchStatus="pending",data.id=maxKey+1,console.log(data),idbPromise.then(function(db){return db.transaction("reviews","readwrite").objectStore("reviews").put(data)}).then(function(status){window.alert("You are in offline mode. Your review will get synched and appear on page once you go online.")})}).catch(function(){console.log("error")})}),modal_wrap.classList.add("close")}),form.appendChild(submit);const cancel=document.createElement("button");cancel.innerHTML="Cancel",cancel.id="cancel-button",cancel.addEventListener("click",function(e){return e.preventDefault(),modal_wrap.classList.add("close"),!1}),form.appendChild(cancel),form.appendChild(document.createElement("br")),modal_wrap.appendChild(form),container.appendChild(modal_wrap)}),reviewButtonHTML=((restaurant=self.restaurant)=>{const container=document.getElementById("reviews-container"),button=document.createElement("button");button.innerHTML="Write Review",button.id="review-button",button.addEventListener("click",function(){if(void 0==document.getElementById("review-form"))showReviewForm(id=restaurant.id);else{document.getElementById("modal_wrap");modal_wrap.classList.remove("close")}}),container.appendChild(button)}),fetchReviews=((restaurant_id=self.restaurant.id)=>{let idbPromise=DBHelper.createIdb();fetch(`http://localhost:1337/reviews/?restaurant_id=${restaurant_id}`).then(function(response){if(response.ok)return response.json();throw new Error(response.status)}).then(function(jsondata){fillReviewsHTML(jsondata),idbPromise.then(function(db){let reviewsStore=db.transaction("reviews","readwrite").objectStore("reviews");for(key in jsondata)reviewsStore.put(jsondata[key])})}).catch(function(error){console.log(error),idbPromise.then(function(db){return db.transaction("reviews","readonly").objectStore("reviews").getAll()}).then(function(reviews){let reviews_for_restaurant=[];for(key in reviews){let review=reviews[key];for(key in review)"restaurant_id"==key&&review[key]==restaurant_id&&(reviews_for_restaurant.push(review),console.log(review))}console.log(reviews_for_restaurant),fillReviewsHTML(reviews_for_restaurant)})})}),fillReviewsHTML=(reviews=>{DBHelper.createIdb();const container=document.getElementById("reviews-container"),title=document.createElement("h2");if(title.innerHTML="Reviews",container.appendChild(title),!reviews){const noReviews=document.createElement("p");return noReviews.innerHTML="No reviews yet!",void container.appendChild(noReviews)}const ul=document.getElementById("reviews-list");let id=1;reviews.forEach(review=>{ul.appendChild(createReviewHTML(review,id)),id+=1}),container.appendChild(ul)}),createReviewHTML=((review,id)=>{const li=document.createElement("li"),date=document.createElement("p");let dateObject=new Date(review.updatedAt);date.innerHTML=dateObject.toDateString(),date.className="review-date",date.id=`review-date-${id}`,li.appendChild(date);const name=document.createElement("p");name.className="reviewer-name",name.id=`reviewer-name-${id}`,name.innerHTML=review.name,li.appendChild(name);const rating=document.createElement("p");for(var i=0;i<review.rating;i++){const star=document.createElement("span");star.className="fa fa-star checked",rating.appendChild(star)}for(i=review.rating;i<5;i++){const star=document.createElement("span");star.className="fa fa-star",rating.appendChild(star)}rating.setAttribute("aria-labelledby",`rating-label-div-${review.rating}-${id}`);const labeldiv=document.createElement("div");labeldiv.id=`rating-label-div-${review.rating}-${id}`,labeldiv.innerHTML=`Rating ${review.rating} out of 5`,labeldiv.hidden=!0,li.appendChild(labeldiv),li.appendChild(rating);const comments=document.createElement("p");return comments.innerHTML=review.comments,comments.id=`review-comments-${id}`,li.appendChild(comments),li}),fillBreadcrumb=((restaurant=self.restaurant)=>{const breadcrumb=document.getElementById("breadcrumb"),li=document.createElement("li");li.innerHTML=restaurant.name,breadcrumb.appendChild(li)}),getParameterByName=((name,url)=>{url||(url=window.location.href),name=name.replace(/[\[\]]/g,"\\$&");const results=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`).exec(url);return results?results[2]?decodeURIComponent(results[2].replace(/\+/g," ")):"":null});